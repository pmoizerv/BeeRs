---
title: "BeeRs"
format: revealjs
editor: visual
image: 
server: shiny
---

## The BeeRs project

A study on beer production and consumption effects in the USA. 


## Main features
:::{.incremental}
The built package includes:

-   A useful **std_err()** function to get the standard error
-   An even more useful **almost()** function to **almost()** get our results
-   A shiny app integrated in the current Quarto presentation
:::

## Functions

##  Shiny

```{r}
#| panel: sidebar
usethis::use_package("shiny")
usethis::use_package("utils")
usethis::use_package("colourpicker")
usethis::use_package("ggplot2")
library(colourpicker)
N=2

shiny::sliderInput("Year",
                   "Year:",
                   min = 2008,
                   max = 2019,
#                   step = 1,
                   sep = "",
                   value = c(2008,2019))
shiny::numericInput("NumberBeers", label = "Number of beers", min = 0, max = 15, step = 1, value = N)
shiny::selectInput("Column", label = "Type of consumption", choices = c("BottlesCans", "Permises", "KegsBarrels"), multiple = T, selected = "Permises")
#colourInput("Max", label = "Max value", value = "yellow")
#colourInput("Min", label = "Min value", value = "grey")
shiny::submitButton(text = "Update plot", icon("refresh"))

    

```

```{r}
#| panel: fill
shiny::plotOutput("plot_output",width="900px",height="600px")
```

```{r}
#| context: server
usethis::use_package("shiny")
usethis::use_package("utils")
usethis::use_package("colourpicker")
usethis::use_package("ggplot2")
library(BeeRs)
data(beers_dat)

 states_map <- ggplot2::map_data("state")
  world_map <- ggplot2::map_data("world") |>
    dplyr::filter(! long > 180)
  Region <- world_map$region |> unique()
  
    output$plot_output <- shiny::renderPlot({
      if (input$NumberBeers == 0) {
        beers_dat |>
          tidyr::pivot_longer(4:6, values_to = "Volume", names_to = "Purpose") |>
          dplyr::filter(year %in% input$Year[1]:input$Year[2],
                        Purpose %in% input$Column,
                        state != "total") |>
          dplyr::group_by(state, state_full) |>
          dplyr::summarise(Volume = sum(Volume, na.rm = T),
                           AVG = almost(Volume/1000, N = input$NumberBeers)) |>
          dplyr::ungroup() |>

        #dplyr::mutate(AVG = ifelse(AVG == NA, 0, as.numeric(AVG))) |>
          dplyr::mutate(Total = sum(AVG, na.rm = T),
                        Percent = (AVG/Total) * 100,
                        AlmostPercent = Percent + mean(rnorm(100/(input$NumberBeers + 1), 0, input$NumberBeers)),
                        AlmostTotal = sum(AlmostPercent, na.rm = T),
                        Percent = (AlmostPercent/AlmostTotal) * 100) |>

          ggplot2::ggplot(mapping = ggplot2::aes(map_id = state_full))+
          ggplot2::geom_map(mapping = ggplot2::aes(fill = Percent), map = states_map, col = 1) +
          ggplot2::expand_limits(x = states_map$long, y = states_map$lat)+
        ggplot2::scale_fill_gradient2(high = "red", low = "blue", midpoint = 6) +
        ggplot2::labs(title = paste("Beer production per state (%)" )) +

        ggplot2::theme_void() +
        ggplot2::theme(legend.position = "bottom",
                       legend.key.size = grid::unit(2, 'cm'),
                       legend.text = ggplot2::element_text(size = 13),
                       legend.title = ggplot2::element_blank(),
                       title = ggplot2::element_text(size = 17))
    }
    else if (input$NumberBeers %in% 1:7) {
      beers_dat |>
        tidyr::pivot_longer(4:6, values_to = "Volume", names_to = "Purpose") |>
        dplyr::filter(year %in% input$Year[1]:input$Year[2],
                      Purpose %in% input$Column,
                      state != "total") |>
        dplyr::group_by(state, state_full) |>
        dplyr::summarise(Volume = sum(Volume, na.rm = T),
                         AVG = almost(Volume/1000, N = input$NumberBeers)) |>
        dplyr::ungroup() |>

        #dplyr::mutate(AVG = ifelse(AVG == NA, 0, as.numeric(AVG))) |>
        dplyr::mutate(Total = sum(AVG, na.rm = T),
                      Percent = (AVG/Total) * 100,
                      AlmostPercent = Percent + mean(rnorm(100/(input$NumberBeers + 1), 0, input$NumberBeers)),
                      AlmostTotal = sum(AlmostPercent, na.rm = T),
                      Percent = (AlmostPercent/AlmostTotal) * 100) |>


        ggplot2::ggplot(mapping = ggplot2::aes(map_id = state_full))+
        ggplot2::geom_map(mapping = ggplot2::aes(fill = Percent), map = states_map, col = 1) +
        ggplot2::expand_limits(x = states_map$long, y = states_map$lat)+
        ggplot2::scale_fill_gradient2(high = "red", low = "blue", midpoint = 6) +
        ggplot2::labs(title = paste("Beer production per state (%)" ),
                      subtitle = paste("However with a bit of uncertainty since you chose to make me drink", input$NumberBeers, "beers...")) +
        ggplot2::theme_void() +
        ggplot2::theme(legend.position = "bottom",
                       legend.key.size = grid::unit((input$NumberBeers)/10+2, 'cm'),
                       legend.text = ggplot2::element_text(size = (13 + (input$NumberBeers)/5)),
                       legend.title = ggplot2::element_blank(),
                       title = ggplot2::element_text(size = (17 + (input$NumberBeers)/5)))
    }
    else if (input$NumberBeers %in%  8:10) {

      world_map |>
        dplyr::mutate(USA = ifelse(region == "USA", "USA", "nonUSA"),
                      USA = factor(USA, levels = c("USA", "nonUSA")))|>
        ggplot2::ggplot(ggplot2::aes(fill = USA, map_id = region)) +
        ggplot2::geom_map(map = world_map, col = "black") +
        ggplot2::expand_limits(x = world_map$long, y = world_map$lat) +
        ggplot2::coord_map("moll") +
        ggplot2::scale_fill_manual(values = c("#293F14", "#EDD3C4")) +
        ggplot2::labs(title = paste("I don't understand your question after", input$NumberBeers, "beers..."),
                      subtitle = "so I show you where the USA are...") +
        ggplot2::theme_void() +
        ggplot2::theme(legend.position = "none")

    }
    else {

      world_map |>
        dplyr::mutate(USA = ifelse(region == sample(Region, 1), "USA", "nonUSA"),
                      USA = factor(USA, levels = c("USA", "nonUSA")))|>
        ggplot2::ggplot(ggplot2::aes(fill = USA, map_id = region)) +
        ggplot2::geom_map(map = world_map, col = "black") +
        ggplot2::expand_limits(x = world_map$long, y = world_map$lat) +
        ggplot2::coord_map("moll") +
        ggplot2::scale_fill_manual(values = c("#293F14", "#EDD3C4")) +
        ggplot2::labs(title = paste("I don't understand your question after", input$NumberBeers, "beers..."),
                      subtitle = "so I show you a random country") +
        ggplot2::theme_void() +
        ggplot2::theme(legend.position = "none")
    }
  })



```

## Stuck

## Thanks

## slide example
```{r}

#| eval: false
#| echo: true
#| 

std_err <- function(x, N=0) {
  n <- length(x[!is.na(x)]) # calculate the length of the vector
  if (n > 2) { # <- only compute standard error for vector >= 2
    out <- std_dev(x, N) / sqrt(n)
  } else {
    out <- NA
  }
  return(out)
}
```



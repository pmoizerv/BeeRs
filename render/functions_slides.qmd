---
title: "BeeRs"
format: revealjs
editor: visual
execute:
  echo: false
---

## The BeeRs project

A study on beer production and consumption effects in the USA.

## Main features

::: incremental
The built package includes:

-   A useful **std_err()** function to get the standard error
-   An even more useful **almost()** function to **almost()** get our results
-   Some data from [Kaggle](https://www.kaggle.com/datasets/jessemostipak/beer-production) describing beer production and usage in the USA
-   A shiny app integrated in the current Quarto presentation
:::

## Functions

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "1|2,3|6,7|9,10|13,14"
almost <- function(x, N = 0L){
  if(N == 0){
    output <- mean(x, na.rm = T)
    return(output)
  }
  if(N > 0 & N <= 7){
    output <- round(mean(rnorm(500/N, mean(x, na.rm = T), sd = N/3)), digits = 2)
    return(output)
  }
  if(N > 7 & N <= 9){
    return(paste("after", N, "beers, I am unable to calculate"))
  }
  if(N > 9){
    Sys.sleep(7);return(paste("I don't know, let me sleep..."))
  }
}
```

## It does what we wanted it to do...

```{r}
library(tidyverse)
library(BeeRs)
output_df <- matrix(nrow = 100, ncol = 8)  # Create an empty matrix to store output

vec <- sample(1:100, 200, replace = T)
for (i in 1:100) {
  for (j in 1:7) {
    output_df[i, j] <- almost(vec, N = j)  # Call the function and store the result
  }
  output_df[i, 8] <- almost(vec, N=0L)
}

output_df %>% as.data.frame() %>%
  dplyr::mutate(Replicate = 1:100)%>%
  pivot_longer(1:8, names_to = "Beers_number", values_to = "Estimated_mean") %>%
  dplyr::mutate(Beers_number = dplyr::case_when(Beers_number == "V1" ~ 1,
                                         Beers_number == "V2" ~ 2,
                                         Beers_number == "V3" ~ 3,
                                         Beers_number == "V4" ~ 4,
                                         Beers_number == "V5" ~ 5,
                                         Beers_number == "V6" ~ 6,
                                         Beers_number == "V7" ~ 7,
                                         Beers_number == "V8" ~ 0)) %>%

  ggplot(aes(x = as.factor(Beers_number), y = Estimated_mean)) +
  ggplot2::geom_boxplot(col = 1, fill = "yellow", alpha = .2) +
  ggplot2::geom_jitter(height = 0, width=.2,
                       col = 1, shape = 21, size = 3) +
  ggplot2::theme_minimal() +
  ggplot2::labs(x = "Number of beers",
                y = "Estimated mean") +
  ggplot2::coord_fixed(ratio = 3/1)
```

## 

::: incremental
We then used the `almost` for different functions.

-   `sum_squared_deviations`
-   `std_dev`
-   `std_err`
:::

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "1|4"
std_err <- function(x, N=0) {
  n <- length(x[!is.na(x)]) # calculate the length of the vector
  if (n > 2) { # <- only compute standard error for vector >= 2
    out <- std_dev(x, N) / sqrt(n)
  } else {
    out <- NA
  }
  return(out)
}
```

## Data

```{r}
#| echo: true
#| eval: true

library(BeeRs)
data("beers_dat")
head(beers_dat, n = 15) 
```
